---
import Navigation from "../../components/Navigation.astro";
import Select from "../../components/selectplatform.astro";
import Layout from "../../layouts/Layout.astro";
import "../../css/collection.css";

export const prerender = false;

const { collection } = Astro.params;
---

<Layout title={collection}>
  <Navigation />

  <div class="link show">
    <form class="form" action="submit">
      <h2>Save URL</h2>
      <p class="menssage">

      </p>
      <img
        id="platformIcon"
        src=""
        alt="icono"
        style="width:30px; height:30px; vertical-align:middle; margin-left:10px; display:none;"
      />
      <label for="Name">Title</label>
      <input type="text" id="Name" class="Name" maxlength="30" required />
      <label for="Description">Description</label>
      <textarea id="Description" class="Description" maxlength="40" required
      ></textarea>
      <label for="Url">Url</label>
      <input type="text" class="Url" id="Url" required />
      <input
        type="text"
        style="display: none;"
        value={collection}
        class="collection"
      />
      <Select />
      <button>Add</button>
    </form>
  </div>

  <div class="hero">
    <div class="button">
      <div class="back">
        <a href="/Folders">Folder</a>
        <h2>/{collection}</h2>
      </div>
      <button class="CreateLink">New</button>
    </div>
    <div class="content"></div>
  </div>

  <script>
    // Import Firebase authentication and Firestore functions
    import { onAuthStateChanged } from "firebase/auth";
    import { auth, db, unsubcribe } from "../../firebase";
    import { doc, getDoc, setDoc } from "firebase/firestore";

    // DOM elements
    const form = document.querySelector(".form");
    const Link = document.querySelector(".link");
    const menssage = document.querySelector(".menssage")
    const CreateLink = document.querySelector(".CreateLink");
    const collection = document.querySelector(".collection");
    const container = document.querySelector(".content");
    const Name = document.querySelector(".Name");
    const Description = document.querySelector(".Description");
    const platform = document.getElementById("platformSearch");
    const dataList = document.getElementById("platforms");
    const URL = document.querySelector(".Url");

    // Environment variables and backend URL
    const apiUrl = import.meta.env.PUBLIC_API_URL;
    const cortlink = "cortlink.live";

    // ðŸ”¹ Check user authentication
    onAuthStateChanged(auth, async (user) => {
      if (!user) {
        // Redirect to home if user is not logged in
        window.location.href = `/`;
      }

      // ðŸ”¹ Get user data from Firestore
      const docRef = doc(db, "users", user.uid);
      const docSnap = await getDoc(docRef);
      let data = docSnap.data();

      // ðŸ”¹ Normalize collection name (lowercase, replace spaces with "-")
      const aliasCollection = collection.value
        .trim()
        .replace(/\s+/g, "-")
        .toLowerCase();

      // ðŸ”¹ Unsubscribe previous real-time listeners and listen again
      unsubcribe(user?.uid, aliasCollection, container);

      // ðŸ”¹ Form submit event
      form?.addEventListener("submit", async (e) => {
        e.preventDefault();

        try {
          // Validate URL format
          const urlValue = URL.value.trim();
          if (!urlValue.startsWith("https://")) {
            alert("The URL must start with https://");
            return;
          }

          // ðŸ”¹ Sanitize alias (only letters, numbers and hyphens)
          const rawAlias = Name.value.trim().toLowerCase();
          const safeAlias = rawAlias
            .replace(/\s+/g, "-") // replace spaces with "-"
            .replace(/[^a-z0-9-]/g, ""); // remove invalid chars

          // ðŸ”¹ Rebuild collection alias
          const aliasCollection = collection.value
            .trim()
            .replace(/\s+/g, "-")
            .toLowerCase();

          // ðŸ”¹ Generate unique alias for this URL
          const alias = `${safeAlias}-${aliasCollection.slice(0, 2)}`;

          // ðŸ”¹ Get platform icon from selected option
          const option = [...dataList.options].find(
            (opt) => opt.value === platform.value
          );
          const iconUrl = option.getAttribute("data-icon");

          // ðŸ”¹ Reference to Firestore document
          const folderRef = doc(db, "users", user.uid, aliasCollection, alias);
          const validate = await getDoc(folderRef);

          if (validate.exists()) {
            menssage.textContent = "ULR exist";
          } else {
            // ðŸ”¹ Save new URL document in Firestore
            await setDoc(folderRef, {
              userId: user.uid,
              Name: Name.value,
              Alias: alias,
              username: data.username,
              Description: Description.value,
              url: `${cortlink}/${data.username}/${alias}`, // shortened URL
              Folder: aliasCollection,
              platform: iconUrl,
              platformName: platform.value,
            }).then(() => {
              Link?.classList.add("show");

            // ðŸ”¹ Send original URL to backend API for shortening
            const newUrl = {
              alias: alias,
              user: data.username,
              url: URL.value,
            };

            const res = await fetch(apiUrl, {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify(newUrl),
            });

            // ðŸ”¹ Reset form inputs
              Name.value = "";
              Description.value = "";
              URL.value = "";
              platform.value = "";
            });
          }
        } catch (error) {
          console.log(error);
        }
      });
    });

    // ðŸ”¹ Toggle form visibility when "New" button is clicked
    CreateLink?.addEventListener("click", () => {
      Link?.classList.remove("show");
    });
  </script>
</Layout>
