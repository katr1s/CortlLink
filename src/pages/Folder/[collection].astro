---
import Navigation from "../../components/Navigation.astro";
import Select from "../../components/selectplatform.astro";
import Layout from "../../layouts/Layout.astro";
import "../../css/collection.css";

export const prerender = false;

const { collection } = Astro.params;
---

<Layout title={collection}>
  <Navigation />

  <div class="link show">
    <form class="form">
      <h2>New URL</h2>
      <img
        id="platformIcon"
        src=""
        alt="icono"
        style="width:30px; height:30px; vertical-align:middle; margin-left:10px; display:none;"
      />
      <label for="Name">Title</label>
      <input type="text" id="Name" class="Name" />
      <label for="Description">Description</label>
      <textarea id="Description" class="Description" maxlength="40"></textarea>
      <label for="Url">Url</label>
      <input type="text" class="Url" id="Url" />
      <input
        type="text"
        style="display: none;"
        value={collection}
        class="collection"
      />
      <Select />
      <button>Add</button>
    </form>
  </div>

  <div class="hero">
    <div class="button">
      <div class="back">
        <a href="/Folders">Folder</a>
        <h2>/{collection}</h2>
      </div>
      <button class="CreateLink">New</button>
    </div>
    <div class="content"></div>
  </div>

  <script>
    import { onAuthStateChanged } from "firebase/auth";
    import { auth, db, unsubcribe } from "../../firebase";
    import { doc, getDoc, setDoc } from "firebase/firestore";

    const form = document.querySelector(".form");
    const Link = document.querySelector(".link");
    const CreateLink = document.querySelector(".CreateLink");
    const collection = document.querySelector(".collection");
    const container = document.querySelector(".content");
    const Name = document.querySelector(".Name");
    const Description = document.querySelector(".Description");
    const platform = document.getElementById("platformSearch");
    const dataList = document.getElementById("platforms");
    const URL = document.querySelector(".Url");
    const apiUrl = import.meta.env.PUBLIC_API_URL;
    const cortlink = "https://cortlink.onrender.com";

    onAuthStateChanged(auth, async (user) => {
      if (!user) {
        window.location.href = "/";
      }

      const docRef = doc(db, "users", user.uid);
      const docSnap = await getDoc(docRef);
      let data = docSnap.data();

      const aliasCollection = collection.value
        .trim()
        .replace(/\s+/g, "-")
        .toLowerCase();

      unsubcribe(user?.uid, aliasCollection, container);

      form?.addEventListener("submit", async (e) => {
        e.preventDefault();

        try {
          const option = [...dataList.options].find(
            (opt) => opt.value === platform.value
          );
          const iconUrl = option.getAttribute("data-icon");

          const alias = Name.value.trim().replace(/\s+/g, "-").toLowerCase();

          const folderRef = doc(db, "users", user.uid, aliasCollection, alias);

          await setDoc(folderRef, {
            userId: user.uid,
            Name: Name.value,
            Alias: alias,
            username: data.username,
            Description: Description.value,
            url: `${cortlink}/${data.username}/${alias}`,
            Folder: aliasCollection,
            platform: iconUrl,
            platformName: platform.value,
          });

          const newUrl = {
            alias: alias,
            user: data.username,
            url: URL.value,
          };

          const res = await fetch(apiUrl, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(newUrl),
          });

          Name.value = "";
          Description.value = "";
          URL.value = "";

          Link?.classList.add("show");
        } catch (error) {
          console.log(error);
        }
      });
    });

    CreateLink?.addEventListener("click", () => {
      Link?.classList.remove("show");
    });
  </script>
</Layout>
